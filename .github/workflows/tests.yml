name: P123 API Client Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
        
    steps:
      - uses: actions/checkout@v4.2.2
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.5.0
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv venv .venv
          source .venv/bin/activate
          uv pip install -e ".[test]"
          uv pip install pytest-cov
      
      - name: Run quality checks
        run: |
          source .venv/bin/activate
          make quality
      
      # CI Always uses existing cassettes - never makes real API calls
      - name: Run tests with existing cassettes
        run: |
          echo "Running tests in CI with VCR_RECORD_MODE=none (using existing cassettes only)"
          source .venv/bin/activate
          python -m pytest tests/ --cov=p123api_client --cov-report=xml --cov-report=term --cov-report=html
        env:
          VCR_ENABLED: "true"
          VCR_RECORD_MODE: "none"
          CI: "true"
      
      # Save coverage results as artifacts
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: htmlcov/
          retention-days: 14

      # Generate coverage badge
      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID || 'none' }}
          filename: p123api-client-coverage.json
          label: coverage
          message: "${{ env.COVERAGE_PERCENT }}%"
          color: ${{ env.COVERAGE_COLOR }}
          namedLogo: python
        if: github.ref == 'refs/heads/main' && env.GIST_ID != ''
        env:
          COVERAGE_PERCENT: ${{ steps.extract-coverage.outputs.coverage }}
          COVERAGE_COLOR: ${{ steps.extract-coverage.outputs.color }}
      
      # Extract coverage percentage for badge
      - name: Extract Coverage Percentage
        id: extract-coverage
        run: |
          source .venv/bin/activate
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          COVERAGE_PCT=$(python -c "print(round(float('${COVERAGE}') * 100))")
          echo "coverage=${COVERAGE_PCT}" >> $GITHUB_OUTPUT
          if (( ${COVERAGE_PCT} >= 80 )); then
            echo "color=brightgreen" >> $GITHUB_OUTPUT
          elif (( ${COVERAGE_PCT} >= 70 )); then
            echo "color=green" >> $GITHUB_OUTPUT
          elif (( ${COVERAGE_PCT} >= 60 )); then
            echo "color=yellowgreen" >> $GITHUB_OUTPUT
          elif (( ${COVERAGE_PCT} >= 50 )); then
            echo "color=yellow" >> $GITHUB_OUTPUT
          elif (( ${COVERAGE_PCT} >= 40 )); then
            echo "color=orange" >> $GITHUB_OUTPUT
          else
            echo "color=red" >> $GITHUB_OUTPUT
          fi
      
      # If tests fail because cassettes are missing or outdated, we provide a helpful error message
      - name: Handle cassette-related failures
        if: failure()
        run: |
          echo "::warning::Tests failed - this may be because cassettes are missing or outdated"
          echo "::warning::To update cassettes, run locally with: VCR_RECORD_MODE=all pytest tests/"
          echo "::warning::Then commit the updated cassette files"
          exit 1 